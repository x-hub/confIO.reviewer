

'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === 'function' ? Symbol.iterator : '@@iterator') in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function resolveModuleRequires(resolutionResponse, module) {
  var pairs = resolutionResponse.getResolvedDependencyPairs(module);
  return pairs ? pairs.map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        dependencyModule = _ref2[1];

    return dependencyModule;
  }) : [];
}

function getModuleDependents(cache, module) {
  var dependents = cache.get(module);
  if (!dependents) {
    dependents = new Set();
    cache.set(module, dependents);
  }
  return dependents;
}

function getInverseDependencies(resolutionResponse) {
  var cache = new Map();

  resolutionResponse.dependencies.forEach(function (module) {
    resolveModuleRequires(resolutionResponse, module).forEach(function (dependency) {
      getModuleDependents(cache, dependency).add(module);
    });
  });

  return cache;
}

module.exports = getInverseDependencies;