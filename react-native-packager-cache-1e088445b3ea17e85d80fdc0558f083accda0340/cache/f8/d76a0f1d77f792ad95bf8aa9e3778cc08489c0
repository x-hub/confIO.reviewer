var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = '/home/bassihassan/Desktop/confIOReviewer/node_modules/react-native-pull-refresh/src/AnimatedPullToRefresh.js';

var _reactNative = require('react-native');

var _lottieReactNative = require('lottie-react-native');

var _lottieReactNative2 = _interopRequireDefault(_lottieReactNative);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  AnimatedPullToRefresh: {
    displayName: 'AnimatedPullToRefresh'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/home/bassihassan/Desktop/confIOReviewer/node_modules/react-native-pull-refresh/src/AnimatedPullToRefresh.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var AnimatedPullToRefresh = _wrapComponent('AnimatedPullToRefresh')((_temp = _class = function (_React$Component) {
  _inherits(AnimatedPullToRefresh, _React$Component);

  function AnimatedPullToRefresh(props) {
    _classCallCheck(this, AnimatedPullToRefresh);

    var _this = _possibleConstructorReturn(this, (AnimatedPullToRefresh.__proto__ || Object.getPrototypeOf(AnimatedPullToRefresh)).call(this, props));

    _this.state = {
      scrollY: new _reactNative.Animated.Value(0),
      refreshHeight: new _reactNative.Animated.Value(0),
      currentY: 0,
      isScrollFree: false,

      isRefreshAnimationStarted: false,
      isRefreshAnimationEnded: false,
      initAnimationProgress: new _reactNative.Animated.Value(0),
      repeatAnimationProgress: new _reactNative.Animated.Value(0),
      finalAnimationProgress: new _reactNative.Animated.Value(0)
    };

    _this.onRepeatAnimation = _this.onRepeatAnimation.bind(_this);
    _this.onEndAnimation = _this.onEndAnimation.bind(_this);

    _reactNative.UIManager.setLayoutAnimationEnabledExperimental && _reactNative.UIManager.setLayoutAnimationEnabledExperimental(true);
    return _this;
  }

  _createClass(AnimatedPullToRefresh, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._panResponder = _reactNative.PanResponder.create({
        onStartShouldSetPanResponder: this._handleStartShouldSetPanResponder.bind(this),
        onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder.bind(this),
        onPanResponderMove: this._handlePanResponderMove.bind(this),
        onPanResponderRelease: this._handlePanResponderEnd.bind(this),
        onPanResponderTerminate: this._handlePanResponderEnd.bind(this)
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (this.props.isRefreshing !== props.isRefreshing) {
        if (!props.isRefreshing) {}
      }
    }
  }, {
    key: '_handleStartShouldSetPanResponder',
    value: function _handleStartShouldSetPanResponder(e, gestureState) {
      return !this.state.isScrollFree;
    }
  }, {
    key: '_handleMoveShouldSetPanResponder',
    value: function _handleMoveShouldSetPanResponder(e, gestureState) {
      return !this.state.isScrollFree;
    }
  }, {
    key: '_handlePanResponderMove',
    value: function _handlePanResponderMove(e, gestureState) {
      if (!this.props.isRefreshing) {
        if (gestureState.dy >= 0 && this.state.scrollY._value === 0 || this.state.refreshHeight._value > 0) {
          this.state.refreshHeight.setValue(-1 * gestureState.dy * .5);
        } else {
          this.refs.scrollComponentRef.scrollTo({ y: -1 * gestureState.dy, animated: true });
        }
      }
    }
  }, {
    key: '_handlePanResponderEnd',
    value: function _handlePanResponderEnd(e, gestureState) {
      var _this2 = this;

      if (!this.props.isRefreshing) {
        if (this.state.refreshHeight._value <= -this.props.pullHeight) {
          this.onScrollRelease();
          _reactNative.Animated.parallel([_reactNative.Animated.spring(this.state.refreshHeight, {
            toValue: -this.props.pullHeight
          }), _reactNative.Animated.timing(this.state.initAnimationProgress, {
            toValue: 1,
            duration: 1000
          })]).start(function () {
            _this2.state.initAnimationProgress.setValue(0);
            _this2.setState({ isRefreshAnimationStarted: true });
            _this2.onRepeatAnimation();
          });
        } else if (this.state.refreshHeight._value <= 0) {
          _reactNative.Animated.spring(this.state.refreshHeight, {
            toValue: 0
          }).start();
        }

        if (this.state.scrollY._value > 0) {
          this.setState({ isScrollFree: true });
        }
      }
    }
  }, {
    key: 'onRepeatAnimation',
    value: function onRepeatAnimation() {
      var _this3 = this;

      this.state.repeatAnimationProgress.setValue(0);

      _reactNative.Animated.timing(this.state.repeatAnimationProgress, {
        toValue: 1,
        duration: 1000
      }).start(function () {
        if (_this3.props.isRefreshing) {
          _this3.onRepeatAnimation();
        } else {
          _this3.state.repeatAnimationProgress.setValue(0);
          _this3.onEndAnimation();
        }
      });
    }
  }, {
    key: 'onEndAnimation',
    value: function onEndAnimation() {
      var _this4 = this;

      this.setState({ isRefreshAnimationEnded: true });
      _reactNative.Animated.sequence([_reactNative.Animated.timing(this.state.finalAnimationProgress, {
        toValue: 1,
        duration: 1000
      }), _reactNative.Animated.spring(this.state.refreshHeight, {
        toValue: 0,
        bounciness: 12
      })]).start(function () {
        _this4.state.finalAnimationProgress.setValue(0);
        _this4.setState({
          isRefreshAnimationEnded: false,
          isRefreshAnimationStarted: false
        });
      });
    }
  }, {
    key: 'onScrollRelease',
    value: function onScrollRelease() {
      if (!this.props.isRefreshing) {
        this.props.onRefresh();
      }
    }
  }, {
    key: 'isScrolledToTop',
    value: function isScrolledToTop() {
      if (this.state.scrollY._value === 0 && this.state.isScrollFree) {
        this.setState({ isScrollFree: false });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this5 = this;

      var onScrollEvent = function onScrollEvent(event) {
        _this5.state.scrollY.setValue(event.nativeEvent.contentOffset.y);
      };

      var animateHeight = this.state.refreshHeight.interpolate({
        inputRange: [-this.props.pullHeight, 0],
        outputRange: [this.props.pullHeight, 0]
      });

      var animateProgress = this.state.refreshHeight.interpolate({
        inputRange: [-this.props.pullHeight, 0],
        outputRange: [1, 0],
        extrapolate: 'clamp'
      });

      var animationStyle = {
        position: 'absolute',
        top: 0,
        bottom: 0,
        right: 0,
        left: 0,
        backgroundColor: this.props.animationBackgroundColor,
        width: _reactNative.Dimensions.get('window').width,
        height: this.props.pullHeight
      };

      return _react3.default.createElement(
        _reactNative.View,
        _extends({
          style: { flex: 1, backgroundColor: this.props.animationBackgroundColor }
        }, this._panResponder.panHandlers, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 218
          }
        }),
        _react3.default.createElement(_lottieReactNative2.default, {
          style: [animationStyle, { opacity: this.props.isRefreshing ? 0 : 1 }],
          source: this.props.onPullAnimationSrc,
          progress: animateProgress,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 222
          }
        }),
        _react3.default.createElement(_lottieReactNative2.default, {
          style: [animationStyle, { opacity: this.props.isRefreshing && !this.state.isRefreshAnimationStarted ? 1 : 0 }],
          source: this.props.onStartRefreshAnimationSrc,
          progress: this.state.initAnimationProgress,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 227
          }
        }),
        _react3.default.createElement(_lottieReactNative2.default, {
          style: [animationStyle, { opacity: this.state.isRefreshAnimationStarted && !this.state.isRefreshAnimationEnded ? 1 : 0 }],
          source: this.props.onRefreshAnimationSrc,
          progress: this.state.repeatAnimationProgress,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 232
          }
        }),
        _react3.default.createElement(_lottieReactNative2.default, {
          style: [animationStyle, { opacity: this.state.isRefreshAnimationEnded ? 1 : 0 }],
          source: this.props.onEndRefreshAnimationSrc,
          progress: this.state.finalAnimationProgress,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 237
          }
        }),
        _react3.default.createElement(
          _reactNative.ScrollView,
          { ref: 'scrollComponentRef',
            scrollEnabled: this.state.isScrollFree,
            onScroll: onScrollEvent,
            onTouchEnd: function onTouchEnd() {
              _this5.isScrolledToTop();
            },
            onScrollEndDrag: function onScrollEndDrag() {
              _this5.isScrolledToTop();
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 243
            }
          },
          _react3.default.createElement(
            _reactNative.Animated.View,
            { style: { marginTop: animateHeight }, __source: {
                fileName: _jsxFileName,
                lineNumber: 249
              }
            },
            _react3.default.cloneElement(this.props.contentView, {
              scrollEnabled: false,
              ref: 'scrollComponentRef'
            })
          )
        )
      );
    }
  }]);

  return AnimatedPullToRefresh;
}(_react3.default.Component), _class.propTypes = {
  isRefreshing: _react3.default.PropTypes.bool.isRequired,

  pullHeight: _react3.default.PropTypes.number,

  onRefresh: _react3.default.PropTypes.func.isRequired,

  contentView: _react3.default.PropTypes.object.isRequired,

  animationBackgroundColor: _react3.default.PropTypes.string,

  onScroll: _react3.default.PropTypes.func
}, _class.defaultProps = {
  pullHeight: 180,
  animationBackgroundColor: 'white'
}, _temp));

module.exports = AnimatedPullToRefresh;