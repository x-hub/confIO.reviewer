
'use strict';

var findAndroidAppFolder = require('./findAndroidAppFolder');
var findManifest = require('./findManifest');
var findPackageClassName = require('./findPackageClassName');
var path = require('path');
var readManifest = require('./readManifest');

var getPackageName = function getPackageName(manifest) {
  return manifest.attr.package;
};

exports.projectConfig = function projectConfigAndroid(folder, userConfig) {
  var src = userConfig.sourceDir || findAndroidAppFolder(folder);

  if (!src) {
    return null;
  }

  var sourceDir = path.join(folder, src);
  var isFlat = sourceDir.indexOf('app') === -1;
  var manifestPath = userConfig.manifestPath ? path.join(sourceDir, userConfig.manifestPath) : findManifest(sourceDir);

  if (!manifestPath) {
    return null;
  }

  var manifest = readManifest(manifestPath);

  var packageName = userConfig.packageName || getPackageName(manifest);

  if (!packageName) {
    throw new Error('Package name not found in ' + manifestPath);
  }

  var packageFolder = userConfig.packageFolder || packageName.replace(/\./g, path.sep);

  var mainFilePath = path.join(sourceDir, userConfig.mainFilePath || 'src/main/java/' + packageFolder + '/MainApplication.java');

  var stringsPath = path.join(sourceDir, userConfig.stringsPath || 'src/main/res/values/strings.xml');

  var settingsGradlePath = path.join(folder, 'android', userConfig.settingsGradlePath || 'settings.gradle');

  var assetsPath = path.join(sourceDir, userConfig.assetsPath || 'src/main/assets');

  var buildGradlePath = path.join(sourceDir, userConfig.buildGradlePath || 'build.gradle');

  return {
    sourceDir: sourceDir,
    isFlat: isFlat,
    folder: folder,
    stringsPath: stringsPath,
    manifestPath: manifestPath,
    buildGradlePath: buildGradlePath,
    settingsGradlePath: settingsGradlePath,
    assetsPath: assetsPath,
    mainFilePath: mainFilePath
  };
};

exports.dependencyConfig = function dependencyConfigAndroid(folder, userConfig) {
  var src = userConfig.sourceDir || findAndroidAppFolder(folder);

  if (!src) {
    return null;
  }

  var sourceDir = path.join(folder, src);
  var manifestPath = userConfig.manifestPath ? path.join(sourceDir, userConfig.manifestPath) : findManifest(sourceDir);

  if (!manifestPath) {
    return null;
  }

  var manifest = readManifest(manifestPath);
  var packageName = userConfig.packageName || getPackageName(manifest);
  var packageClassName = findPackageClassName(sourceDir);

  if (!packageClassName) {
    return null;
  }

  var packageImportPath = userConfig.packageImportPath || 'import ' + packageName + '.' + packageClassName + ';';

  var packageInstance = userConfig.packageInstance || 'new ' + packageClassName + '()';

  return { sourceDir: sourceDir, folder: folder, manifest: manifest, packageImportPath: packageImportPath, packageInstance: packageInstance };
};