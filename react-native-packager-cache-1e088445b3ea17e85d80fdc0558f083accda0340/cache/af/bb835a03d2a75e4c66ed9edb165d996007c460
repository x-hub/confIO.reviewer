Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactNativeModal = undefined;

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _initialiseProps,
    _jsxFileName = '/home/bassihassan/Desktop/confIOReviewer/node_modules/react-native-modal/src/index.js';

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNativeAnimatable = require('react-native-animatable');

var _animations = require('./animations');

var ANIMATION_DEFINITIONS = _interopRequireWildcard(_animations);

var _indexStyle = require('./index.style.js');

var _indexStyle2 = _interopRequireDefault(_indexStyle);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  ReactNativeModal: {
    displayName: 'ReactNativeModal'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/home/bassihassan/Desktop/confIOReviewer/node_modules/react-native-modal/src/index.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

(0, _reactNativeAnimatable.initializeRegistryWithDefinitions)(ANIMATION_DEFINITIONS);

var makeAnimation = function makeAnimation(name, obj) {
  (0, _reactNativeAnimatable.registerAnimation)(name, (0, _reactNativeAnimatable.createAnimation)(obj));
};

var isObject = function isObject(obj) {
  return obj !== null && typeof obj === 'object';
};

var ReactNativeModal = _wrapComponent('ReactNativeModal')((_temp = _class = function (_Component) {
  _inherits(ReactNativeModal, _Component);

  function ReactNativeModal(props) {
    _classCallCheck(this, ReactNativeModal);

    var _this = _possibleConstructorReturn(this, (ReactNativeModal.__proto__ || Object.getPrototypeOf(ReactNativeModal)).call(this, props));

    _initialiseProps.call(_this);

    _this._buildAnimations(props);
    return _this;
  }

  _createClass(ReactNativeModal, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!this.state.isVisible && nextProps.isVisible) {
        this.setState({ isVisible: true });
      }
      if (this.props.animationIn !== nextProps.animationIn || this.props.animationOut !== nextProps.animationOut) {
        this._buildAnimations(nextProps);
      }
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this.props.isVisible) {
        this.setState({ isVisible: true });
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.state.isVisible) {
        this._open();
      }
      _reactNative.DeviceEventEmitter.addListener('didUpdateDimensions', this._handleDimensionsUpdate);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _reactNative.DeviceEventEmitter.removeListener('didUpdateDimensions', this._handleDimensionsUpdate);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.props.isVisible && !prevProps.isVisible) {
        this._open();
      } else if (!this.props.isVisible && prevProps.isVisible) {
          this._close();
        }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          animationIn = _props.animationIn,
          animationInTiming = _props.animationInTiming,
          animationOut = _props.animationOut,
          animationOutTiming = _props.animationOutTiming,
          avoidKeyboard = _props.avoidKeyboard,
          backdropColor = _props.backdropColor,
          backdropOpacity = _props.backdropOpacity,
          backdropTransitionInTiming = _props.backdropTransitionInTiming,
          backdropTransitionOutTiming = _props.backdropTransitionOutTiming,
          children = _props.children,
          isVisible = _props.isVisible,
          onModalShow = _props.onModalShow,
          onBackdropPress = _props.onBackdropPress,
          onBackButtonPress = _props.onBackButtonPress,
          useNativeDriver = _props.useNativeDriver,
          style = _props.style,
          otherProps = _objectWithoutProperties(_props, ['animationIn', 'animationInTiming', 'animationOut', 'animationOutTiming', 'avoidKeyboard', 'backdropColor', 'backdropOpacity', 'backdropTransitionInTiming', 'backdropTransitionOutTiming', 'children', 'isVisible', 'onModalShow', 'onBackdropPress', 'onBackButtonPress', 'useNativeDriver', 'style']);

      var _state = this.state,
          deviceWidth = _state.deviceWidth,
          deviceHeight = _state.deviceHeight;


      var computedStyle = [{ margin: deviceWidth * 0.05, transform: [{ translateY: 0 }] }, _indexStyle2.default.content, style];

      var containerView = _react3.default.createElement(
        _reactNativeAnimatable.View,
        _extends({
          ref: function ref(_ref) {
            return _this2.contentRef = _ref;
          },
          style: computedStyle,
          pointerEvents: 'box-none',
          useNativeDriver: useNativeDriver
        }, otherProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 220
          }
        }),
        children
      );

      return _react3.default.createElement(
        _reactNative.Modal,
        _extends({
          transparent: true,
          animationType: 'none',
          visible: this.state.isVisible,
          onRequestClose: onBackButtonPress
        }, otherProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 232
          }
        }),
        _react3.default.createElement(
          _reactNative.TouchableWithoutFeedback,
          { onPress: onBackdropPress, __source: {
              fileName: _jsxFileName,
              lineNumber: 239
            }
          },
          _react3.default.createElement(_reactNativeAnimatable.View, {
            ref: function ref(_ref2) {
              return _this2.backdropRef = _ref2;
            },
            useNativeDriver: useNativeDriver,
            style: [_indexStyle2.default.backdrop, {
              backgroundColor: backdropColor,
              width: deviceWidth,
              height: deviceHeight
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 240
            }
          })
        ),
        avoidKeyboard && _react3.default.createElement(
          _reactNative.KeyboardAvoidingView,
          {
            behavior: 'padding',
            pointerEvents: 'box-none',
            style: computedStyle.concat([{ margin: 0 }]),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 255
            }
          },
          containerView
        ),
        !avoidKeyboard && containerView
      );
    }
  }]);

  return ReactNativeModal;
}(_react2.Component), _class.propTypes = {
  animationIn: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  animationInTiming: _propTypes2.default.number,
  animationOut: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  animationOutTiming: _propTypes2.default.number,
  avoidKeyboard: _propTypes2.default.bool,
  backdropColor: _propTypes2.default.string,
  backdropOpacity: _propTypes2.default.number,
  backdropTransitionInTiming: _propTypes2.default.number,
  backdropTransitionOutTiming: _propTypes2.default.number,
  children: _propTypes2.default.node.isRequired,
  isVisible: _propTypes2.default.bool.isRequired,
  onModalShow: _propTypes2.default.func,
  onModalHide: _propTypes2.default.func,
  onBackButtonPress: _propTypes2.default.func,
  onBackdropPress: _propTypes2.default.func,
  useNativeDriver: _propTypes2.default.bool,
  style: _propTypes2.default.any
}, _class.defaultProps = {
  animationIn: 'slideInUp',
  animationInTiming: 300,
  animationOut: 'slideOutDown',
  animationOutTiming: 300,
  avoidKeyboard: false,
  backdropColor: 'black',
  backdropOpacity: 0.7,
  backdropTransitionInTiming: 300,
  backdropTransitionOutTiming: 300,
  onModalShow: function onModalShow() {
    return null;
  },
  onModalHide: function onModalHide() {
    return null;
  },
  isVisible: false,
  onBackdropPress: function onBackdropPress() {
    return null;
  },
  onBackButtonPress: function onBackButtonPress() {
    return null;
  },
  useNativeDriver: false
}, _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.state = {
    isVisible: false,
    deviceWidth: _reactNative.Dimensions.get('window').width,
    deviceHeight: _reactNative.Dimensions.get('window').height
  };
  this.transitionLock = null;

  this._buildAnimations = function (props) {
    var animationIn = props.animationIn;
    var animationOut = props.animationOut;

    if (isObject(animationIn)) {
      makeAnimation('animationIn', animationIn);
      animationIn = 'animationIn';
    }

    if (isObject(animationOut)) {
      makeAnimation('animationOut', animationOut);
      animationOut = 'animationOut';
    }

    _this3.animationIn = animationIn;
    _this3.animationOut = animationOut;
  };

  this._handleDimensionsUpdate = function (dimensionsUpdate) {
    var deviceWidth = _reactNative.Dimensions.get('window').width;
    var deviceHeight = _reactNative.Dimensions.get('window').height;
    if (deviceWidth !== _this3.state.deviceWidth || deviceHeight !== _this3.state.deviceHeight) {
      _this3.setState({ deviceWidth: deviceWidth, deviceHeight: deviceHeight });
    }
  };

  this._open = function () {
    if (_this3.transitionLock) return;
    _this3.transitionLock = true;
    _this3.backdropRef.transitionTo({ opacity: _this3.props.backdropOpacity }, _this3.props.backdropTransitionInTiming);
    _this3.contentRef[_this3.animationIn](_this3.props.animationInTiming).then(function () {
      _this3.transitionLock = false;
      if (!_this3.props.isVisible) {
        _this3._close();
      } else {
        _this3.props.onModalShow();
      }
    });
  };

  this._close = function () {
    if (_this3.transitionLock) return;
    _this3.transitionLock = true;
    _this3.backdropRef.transitionTo({ opacity: 0 }, _this3.props.backdropTransitionOutTiming);
    _this3.contentRef[_this3.animationOut](_this3.props.animationOutTiming).then(function () {
      _this3.transitionLock = false;
      if (_this3.props.isVisible) {
        _this3._open();
      } else {
        _this3.setState({ isVisible: false });
        _this3.props.onModalHide();
      }
    });
  };
}, _temp));

exports.ReactNativeModal = ReactNativeModal;
exports.default = ReactNativeModal;