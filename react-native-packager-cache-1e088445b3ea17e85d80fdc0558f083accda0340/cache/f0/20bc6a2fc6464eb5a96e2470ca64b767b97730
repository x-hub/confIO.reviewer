Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../node_modules/react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactNative = require('react-native');

var _reactNativeOrientation = require('react-native-orientation');

var _reactNativeOrientation2 = _interopRequireDefault(_reactNativeOrientation);

var _style = require('./style');

var _style2 = _interopRequireDefault(_style);

var _actions = require('./actions.factory');

var _reactRedux = require('react-redux');

var _redux = require('redux');

var _template = require('./template');

var _template2 = _interopRequireDefault(_template);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
    TalkDetail: {
        displayName: 'TalkDetail'
    }
};

var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: '/home/bassihassan/Desktop/confIOReviewer/src/TalkDetail/index.js',
    components: _components,
    locals: [module],
    imports: [_react3.default]
});

function _wrapComponent(id) {
    return function (Component) {
        return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
}

var _Dimensions$get = _reactNative.Dimensions.get('window'),
    height = _Dimensions$get.height;

var TalkDetail = _wrapComponent('TalkDetail')(function (_Component) {
    _inherits(TalkDetail, _Component);

    function TalkDetail(props) {
        _classCallCheck(this, TalkDetail);

        var _this = _possibleConstructorReturn(this, (TalkDetail.__proto__ || Object.getPrototypeOf(TalkDetail)).call(this, props));

        _this.props.draggableRange = {
            top: height / 2,
            bottom: 0
        };
        var slot = _this.props.navigation.state.params.slot;

        _this.slot = slot;
        return _this;
    }

    _createClass(TalkDetail, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            var _this2 = this;

            _reactNativeOrientation2.default.addOrientationListener(this._orientationDidChange.bind(this));
            setTimeout(function () {
                _this2.props.contentIsReady = true;
                _this2.setState({ contentIsReady: true });
            }, 500);
            var speakers = this.slot.talk.speakers;

            this.props.getSpeakersDetail(speakers || []);
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {}
    }, {
        key: '_orientationDidChange',
        value: function _orientationDidChange(orientation) {
            var _Dimensions$get2 = _reactNative.Dimensions.get('window'),
                height = _Dimensions$get2.height;
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            _reactNativeOrientation2.default.removeOrientationListener(this._orientationDidChange);
        }
    }, {
        key: 'updateRating',
        value: function updateRating() {}
    }, {
        key: 'render',
        value: function render() {
            return (0, _template2.default)(_style2.default, this.props, this.slot);
        }
    }]);

    return TalkDetail;
}(_react2.Component));

function mapStateToProps(state) {
    return state.talkdetail;
}

function mapDispatchToProps(dispatch) {
    return (0, _redux.bindActionCreators)(_actions.actionCreators, dispatch);
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(TalkDetail);