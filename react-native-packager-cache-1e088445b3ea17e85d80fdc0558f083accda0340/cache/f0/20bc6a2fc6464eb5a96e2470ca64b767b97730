Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === 'function' ? Symbol.iterator : '@@iterator') in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _redux = require('redux');

var _talkdetail = require('./talkdetail.template');

var _talkdetail2 = _interopRequireDefault(_talkdetail);

var _actionsType = require('../App/actionsType');

var _navigator = require('../Navigator/navigator.actions');

var _navigator2 = _interopRequireDefault(_navigator);

var _index = require('../Home/index');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _nativeStorage = require('../App/Services/nativeStorage');

var _nativeStorage2 = _interopRequireDefault(_nativeStorage);

var _rxjs = require('rxjs');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function OnRate(event, talk, type, score) {
    var keyOthers = type == _index.talkStatus.NotReviewed ? event.code + '-talks' : event.code + '-talks-' + _index.talkStatus.Later;
    var keyReviewed = event.code + '-talks-' + _index.talkStatus.Reviewed;
    var reviewedtalks = _nativeStorage2.default.get(keyReviewed);
    var activity = { target: talk.id, timestamp: Date.now(), score: score };
    var others = _nativeStorage2.default.get(keyOthers);
    var observable = type == _index.talkStatus.Reviewed ? _nativeStorage2.default.get(event.code + '-activity').switchMap(function (activities) {
        activities.push(activity);
        return _nativeStorage2.default.save(event.code + '-activity', activities).switchMap(function () {
            return _rxjs.Observable.of({});
        });
    }) : _rxjs.Observable.forkJoin([reviewedtalks, others]).switchMap(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            reviewed = _ref2[0],
            others = _ref2[1];

        return _nativeStorage2.default.get(event.code + '-activity').switchMap(function (activities) {
            activities.push(activity);
            return _nativeStorage2.default.save(event.code + '-activity', activities);
        }).switchMap(function () {
            others = others.filter(function (e) {
                return e != talk.id;
            });
            reviewed.push(talk.id);
            return _rxjs.Observable.forkJoin([_nativeStorage2.default.save(keyOthers, others), _nativeStorage2.default.save(keyReviewed, reviewed)]);
        }).switchMap(function () {
            return _rxjs.Observable.of({
                others: others,
                reviewed: reviewed
            });
        });
    });
    return observable.switchMap(function (_ref3) {
        var others = _ref3.others,
            reviewed = _ref3.reviewed;

        var action = { type: _navigator2.default.GOTO_Swiper, payload: {} };
        if (type != _index.talkStatus.Reviewed) {
            action.payload.talk = talk;
            action.payload.reviewed = reviewed;
            if (type == _index.talkStatus.NotReviewed) action.payload.talks = others;else action.payload.later = others;
        }
        return _rxjs.Observable.of(action);
    }).toPromise();
}

function getSpeaker(position) {
    return {
        type: _actionsType.ACTIONS.SELECT_SPEAKER,
        payload: position
    };
}

function toggleSpeakerDetail(boolean) {
    return {
        type: _actionsType.ACTIONS.TOGGLE_SPEAKER_DETAIL,
        payload: boolean
    };
}

function toggleContentLoader(boolean) {
    return {
        type: _actionsType.ACTIONS.SET_CONTENT_PLACEHOLDER_STATE,
        payload: boolean
    };
}

var actionCreators = {
    OnRate: OnRate,
    getSpeaker: getSpeaker,
    toggleSpeakerDetail: toggleSpeakerDetail,
    toggleContentLoader: toggleContentLoader
};

function mapStateToProps(state) {
    return _extends({}, state.talkdetail);
}

function mapDispatchToProps(dispatch) {
    return (0, _redux.bindActionCreators)(actionCreators, dispatch);
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_talkdetail2.default);