'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../../../../../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = '/home/bassihassan/Desktop/confIOReviewer/node_modules/react-native/local-cli/templates/HelloNavigation/views/chat/ChatScreen.js';

var _reactNative = require('react-native');

var _KeyboardSpacer = require('../../components/KeyboardSpacer');

var _KeyboardSpacer2 = _interopRequireDefault(_KeyboardSpacer);

var _Backend = require('../../lib/Backend');

var _Backend2 = _interopRequireDefault(_Backend);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  ChatScreen: {
    displayName: 'ChatScreen'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/home/bassihassan/Desktop/confIOReviewer/node_modules/react-native/local-cli/templates/HelloNavigation/views/chat/ChatScreen.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var ChatScreen = _wrapComponent('ChatScreen')((_temp = _class = function (_Component) {
  _inherits(ChatScreen, _Component);

  function ChatScreen(props) {
    var _this2 = this;

    _classCallCheck(this, ChatScreen);

    var _this = _possibleConstructorReturn(this, (ChatScreen.__proto__ || Object.getPrototypeOf(ChatScreen)).call(this, props));

    _this.onAddMessage = function _callee() {
      return regeneratorRuntime.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this.addMessageLocal();
              _context.prev = 1;
              _context.next = 4;
              return regeneratorRuntime.awrap(_Backend2.default.sendMessage({
                name: _this.props.navigation.state.params.name,

                message: _this.state.myMessage
              }));

            case 4:
              _context.next = 8;
              break;

            case 6:
              _context.prev = 6;
              _context.t0 = _context['catch'](1);

            case 8:
            case 'end':
              return _context.stop();
          }
        }
      }, null, _this2, [[1, 6]]);
    };

    _this.addMessageLocal = function () {
      _this.setState(function (prevState) {
        if (!prevState.myMessage) {
          return prevState;
        }
        var messages = [].concat(_toConsumableArray(prevState.messages), [{
          name: 'Me',
          text: prevState.myMessage
        }]);
        return {
          messages: messages,
          dataSource: prevState.dataSource.cloneWithRows(messages),
          myMessage: ''
        };
      });
      _this.textInput.clear();
    };

    _this.onMyMessageChange = function (event) {
      _this.setState({ myMessage: event.nativeEvent.text });
    };

    _this.renderRow = function (message) {
      return _react3.default.createElement(
        _reactNative.View,
        { style: styles.bubble, __source: {
            fileName: _jsxFileName,
            lineNumber: 97
          }
        },
        _react3.default.createElement(
          _reactNative.Text,
          { style: styles.name, __source: {
              fileName: _jsxFileName,
              lineNumber: 98
            }
          },
          message.name
        ),
        _react3.default.createElement(
          _reactNative.Text,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 99
            }
          },
          message.text
        )
      );
    };

    var ds = new _reactNative.ListView.DataSource({ rowHasChanged: function rowHasChanged(r1, r2) {
        return r1 !== r2;
      } });
    _this.state = {
      messages: [],
      dataSource: ds,
      myMessage: '',
      isLoading: true
    };
    return _this;
  }

  _createClass(ChatScreen, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var chat;
      return regeneratorRuntime.async(function componentDidMount$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              chat = void 0;
              _context2.prev = 1;
              _context2.next = 4;
              return regeneratorRuntime.awrap(_Backend2.default.fetchChat(this.props.navigation.state.params.name));

            case 4:
              chat = _context2.sent;
              _context2.next = 11;
              break;

            case 7:
              _context2.prev = 7;
              _context2.t0 = _context2['catch'](1);

              this.setState({
                isLoading: false
              });
              return _context2.abrupt('return');

            case 11:
              this.setState(function (prevState) {
                return {
                  messages: chat.messages,
                  dataSource: prevState.dataSource.cloneWithRows(chat.messages),
                  isLoading: false
                };
              });

            case 12:
            case 'end':
              return _context2.stop();
          }
        }
      }, null, this, [[1, 7]]);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      if (this.state.isLoading) {
        return _react3.default.createElement(
          _reactNative.View,
          { style: styles.container, __source: {
              fileName: _jsxFileName,
              lineNumber: 106
            }
          },
          _react3.default.createElement(_reactNative.ActivityIndicator, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 107
            }
          })
        );
      }
      return _react3.default.createElement(
        _reactNative.View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 112
          }
        },
        _react3.default.createElement(_reactNative.ListView, {
          dataSource: this.state.dataSource,
          renderRow: this.renderRow,
          style: styles.listView,
          onLayout: this.scrollToBottom,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 113
          }
        }),
        _react3.default.createElement(
          _reactNative.View,
          { style: styles.composer, __source: {
              fileName: _jsxFileName,
              lineNumber: 119
            }
          },
          _react3.default.createElement(_reactNative.TextInput, {
            ref: function ref(textInput) {
              _this3.textInput = textInput;
            },
            style: styles.textInput,
            placeholder: 'Type a message...',
            text: this.state.myMessage,
            onSubmitEditing: this.onAddMessage,
            onChange: this.onMyMessageChange,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 120
            }
          }),
          this.state.myMessage !== '' && _react3.default.createElement(_reactNative.Button, {
            title: 'Send',
            onPress: this.onAddMessage,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 129
            }
          })
        ),
        _react3.default.createElement(_KeyboardSpacer2.default, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 135
          }
        })
      );
    }
  }]);

  return ChatScreen;
}(_react2.Component), _class.navigationOptions = {
  title: function title(navigation) {
    return 'Chat with ' + navigation.state.params.name;
  }
}, _temp));

exports.default = ChatScreen;


var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    padding: 8,
    backgroundColor: 'white'
  },
  listView: {
    flex: 1,
    alignSelf: 'stretch'
  },
  bubble: {
    alignSelf: 'flex-end',
    backgroundColor: '#d6f3fc',
    padding: 12,
    borderRadius: 4,
    marginBottom: 4
  },
  name: {
    fontWeight: 'bold'
  },
  composer: {
    flexDirection: 'row',
    alignItems: 'center',
    height: 36
  },
  textInput: {
    flex: 1,
    borderColor: '#ddd',
    borderWidth: 1,
    padding: 4,
    height: 30,
    fontSize: 13,
    marginRight: 8
  }
});