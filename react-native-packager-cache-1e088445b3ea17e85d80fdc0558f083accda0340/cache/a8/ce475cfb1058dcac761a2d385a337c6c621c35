
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../../../../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = '/home/bassihassan/Desktop/confIOReviewer/node_modules/react-native/Libraries/Lists/ListView/__mocks__/ListViewMock.js';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  ListViewMock: {
    displayName: 'ListViewMock'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/home/bassihassan/Desktop/confIOReviewer/node_modules/react-native/Libraries/Lists/ListView/__mocks__/ListViewMock.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var ListViewDataSource = require('ListViewDataSource');
var React = require('React');
var ScrollView = require('ScrollView');
var StaticRenderer = require('StaticRenderer');

var ListViewMock = _wrapComponent('ListViewMock')((_temp = _class = function (_React$Component) {
  _inherits(ListViewMock, _React$Component);

  function ListViewMock() {
    _classCallCheck(this, ListViewMock);

    return _possibleConstructorReturn(this, (ListViewMock.__proto__ || Object.getPrototypeOf(ListViewMock)).apply(this, arguments));
  }

  _createClass(ListViewMock, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      ListViewMock.latestRef = this;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          dataSource = _props.dataSource,
          renderFooter = _props.renderFooter,
          renderHeader = _props.renderHeader;

      var rows = [renderHeader && renderHeader()];
      var allRowIDs = dataSource.rowIdentities;
      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var sectionID = dataSource.sectionIdentities[sectionIdx];
        var rowIDs = allRowIDs[sectionIdx];
        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];

          rows.push(React.createElement(StaticRenderer, {
            key: 'section_' + sectionID + '_row_' + rowID,
            shouldUpdate: true,
            render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 38
            }
          }));
        }
      }
      renderFooter && rows.push(renderFooter());
      return this.props.renderScrollComponent(_extends({}, this.props, { children: rows }));
    }
  }]);

  return ListViewMock;
}(React.Component), _class.defaultProps = {
  renderScrollComponent: function renderScrollComponent(props) {
    return React.createElement(ScrollView, _extends({}, props, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 22
      }
    }));
  }
}, _class.DataSource = ListViewDataSource, _temp));

module.exports = ListViewMock;