Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react2 = require("react");

var _react3 = _interopRequireDefault(_react2);

var _index = require("./../../node_modules/react-transform-hmr/lib/index.js");

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = "/home/bassihassan/Desktop/confIOReviewer/src/Feed/feed.template.js";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactNative = require("react-native");

var _nativeBase = require("native-base");

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _rxjs = require("rxjs");

var _nativeStorage = require("../App/Services/nativeStorage");

var _nativeStorage2 = _interopRequireDefault(_nativeStorage);

var _theme = require("../../shared/theme");

var _Http = require("../App/Services/Http");

var _Http2 = _interopRequireDefault(_Http);

var _shared = require("../../shared");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
    Template: {
        displayName: "Template"
    }
};

var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/bassihassan/Desktop/confIOReviewer/src/Feed/feed.template.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
});

function _wrapComponent(id) {
    return function (Component) {
        return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
}

var Template = _wrapComponent("Template")(function (_Component) {
    _inherits(Template, _Component);

    function Template(props) {
        _classCallCheck(this, Template);

        var _this = _possibleConstructorReturn(this, (Template.__proto__ || Object.getPrototypeOf(Template)).call(this, props));

        _this.state = { data: [] };
        return _this;
    }

    _createClass(Template, [{
        key: "componentWillMount",
        value: function componentWillMount() {
            var _this2 = this;

            var _props$data = this.props.data,
                authToken = _props$data.authToken,
                authEndpoint = _props$data.authEndpoint,
                eventDetailsEndpoint = _props$data.eventDetailsEndpoint;

            var eventDetail = _Http2.default.getBody(eventDetailsEndpoint);
            var events = _nativeStorage2.default.get('events');
            var auth = _Http2.default.post(authEndpoint, {
                headers: { 'content-type': 'application/json' },
                body: JSON.stringify({ token: authToken }),
                credentials: 'include'
            });

            _rxjs.Observable.forkJoin([eventDetail, events, auth]).switchMap(function (_ref) {
                var _ref2 = _slicedToArray(_ref, 2),
                    event = _ref2[0],
                    eventsString = _ref2[1];

                var events = eventsString ? eventsString : [];
                if (!events.includes(event.code)) {
                    events.push(event.code);
                    return _nativeStorage2.default.save('events', events).switchMap(function (e) {
                        _nativeStorage2.default.save("event-" + event.code, event);
                        return _Http2.default.getBody(event.baseUrl.concat("cfp/profile.json")).switchMap(function (user) {
                            _nativeStorage2.default.save(event.code + "-user", user);
                            return _rxjs.Observable.of(event);
                        });
                    });
                } else {
                    return _rxjs.Observable.throw(event);
                }
            }).switchMap(function (event) {
                var BaseUrl = event.baseUrl.concat("api/conferences/", event.code);
                var ScheduleUrl = BaseUrl.concat("/schedules/");
                var SpeakersUrl = BaseUrl.concat("/speakers/");
                return _Http2.default.getBody(ScheduleUrl).map(function (e) {
                    return e.links;
                }).switchMap(function (Links) {
                    var AllTalksRequest = Links.map(function (link) {
                        return _Http2.default.getBody(link.href).map(function (e) {
                            return e.slots;
                        });
                    });
                    return _rxjs.Observable.forkJoin(AllTalksRequest);
                }).switchMap(function (resp) {
                    var talks = (0, _lodash2.default)(resp).flatMap().filter(function (e) {
                        return e.talk != null;
                    }).map(function (e) {
                        return e.talk;
                    }).value();
                    var keys = talks.map(function (talk) {
                        return talk.id;
                    });

                    _nativeStorage2.default.save(event.code + "-talks", keys);
                    _nativeStorage2.default.save(event.code + "-talks-reviewed", []);
                    _nativeStorage2.default.save(event.code + "-talks-later", []);
                    _nativeStorage2.default.save(event.code + "-activity", []);
                    keys = keys.map(function (key) {
                        return event.code + "-talk-" + key;
                    });
                    _nativeStorage2.default.save(keys, talks);
                    return _Http2.default.getBody(SpeakersUrl);
                }).switchMap(function (speakers) {
                    var AllSpeakersRequest = speakers.map(function (speaker) {
                        return _Http2.default.getBody(speaker.links[0].href);
                    });
                    return _rxjs.Observable.forkJoin(AllSpeakersRequest);
                }).switchMap(function (fullSpeakersDetail) {
                    var keys = fullSpeakersDetail.map(function (speaker) {
                        return event.code + "-speaker-" + speaker.uuid;
                    });
                    _nativeStorage2.default.save(keys, fullSpeakersDetail);
                    var uuids = fullSpeakersDetail.map(function (speaker) {
                        return speaker.uuid;
                    });
                    _nativeStorage2.default.save(event.code + "-speakers", uuids);

                    return _rxjs.Observable.forkJoin([_nativeStorage2.default.save(keys, fullSpeakersDetail), _nativeStorage2.default.save(event.code + "-speakers", fullSpeakersDetail.map(function (s) {
                        return s.uuid;
                    }))]).switchMap(function () {
                        return _rxjs.Observable.of(event);
                    });
                });
            }).subscribe(function (e) {
                _this2.props.GOTOHome(e);
            }, function (event) {
                if (JSON.stringify(event) == JSON.stringify({})) return;
                _this2.props.GOTOHome(event);
            });
        }
    }, {
        key: "render",
        value: function render() {
            return _react3.default.createElement(
                _nativeBase.Container,
                { style: { backgroundColor: _theme.colors.primary, justifyContent: "center", alignItems: "center" }, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 91
                    }
                },
                _react3.default.createElement(_nativeBase.Spinner, { style: { height: 200, width: 200 }, color: _theme.colors.white, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 92
                    }
                })
            );
        }
    }]);

    return Template;
}(_react2.Component));

exports.default = Template;