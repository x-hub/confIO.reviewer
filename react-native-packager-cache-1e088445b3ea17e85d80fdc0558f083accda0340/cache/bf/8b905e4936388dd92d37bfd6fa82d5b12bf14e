
'use strict';

var _jsxFileName = '/home/bassihassan/Desktop/confIOReviewer/node_modules/react-native/Libraries/Components/Touchable/TouchableBounce.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var Animated = require('Animated');
var EdgeInsetsPropType = require('EdgeInsetsPropType');
var NativeMethodsMixin = require('NativeMethodsMixin');
var React = require('React');
var createReactClass = require('create-react-class');
var PropTypes = require('prop-types');
var Touchable = require('Touchable');

var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var TouchableBounce = createReactClass({
  displayName: 'TouchableBounce',
  mixins: [Touchable.Mixin, NativeMethodsMixin],

  propTypes: {
    accessible: PropTypes.bool,

    onPress: PropTypes.func,
    onPressIn: PropTypes.func,
    onPressOut: PropTypes.func,

    onPressWithCompletion: PropTypes.func,

    onPressAnimationComplete: PropTypes.func,

    pressRetentionOffset: EdgeInsetsPropType,

    hitSlop: EdgeInsetsPropType
  },

  getInitialState: function getInitialState() {
    return _extends({}, this.touchableGetInitialState(), {
      scale: new Animated.Value(1)
    });
  },

  bounceTo: function bounceTo(value, velocity, bounciness, callback) {
    Animated.spring(this.state.scale, {
      toValue: value,
      velocity: velocity,
      bounciness: bounciness,
      useNativeDriver: true
    }).start(callback);
  },

  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    this.bounceTo(0.93, 0.1, 0);
    this.props.onPressIn && this.props.onPressIn(e);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    this.bounceTo(1, 0.4, 0);
    this.props.onPressOut && this.props.onPressOut(e);
  },

  touchableHandlePress: function touchableHandlePress(e) {
    var _this = this;

    var onPressWithCompletion = this.props.onPressWithCompletion;
    if (onPressWithCompletion) {
      onPressWithCompletion(function () {
        _this.state.scale.setValue(0.93);
        _this.bounceTo(1, 10, 10, _this.props.onPressAnimationComplete);
      });
      return;
    }

    this.bounceTo(1, 10, 10, this.props.onPressAnimationComplete);
    this.props.onPress && this.props.onPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return 0;
  },

  render: function render() {
    return React.createElement(
      Animated.View,
      {
        style: [{ transform: [{ scale: this.state.scale }] }, this.props.style],
        accessible: this.props.accessible !== false,

        accessibilityLabel: this.props.accessibilityLabel,

        accessibilityComponentType: this.props.accessibilityComponentType,

        accessibilityTraits: this.props.accessibilityTraits,

        nativeID: this.props.nativeID,

        testID: this.props.testID,
        hitSlop: this.props.hitSlop,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate, __source: {
          fileName: _jsxFileName,
          lineNumber: 141
        }
      },
      this.props.children,
      Touchable.renderDebugView({ color: 'orange', hitSlop: this.props.hitSlop })
    );
  }
});

module.exports = TouchableBounce;