
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var child_process = require('child_process');
var fs = require('fs');
var path = require('path');
var findXcodeProject = require('./findXcodeProject');
var findReactNativeScripts = require('../util/findReactNativeScripts');
var parseIOSDevicesList = require('./parseIOSDevicesList');
var findMatchingSimulator = require('./findMatchingSimulator');
var getBuildPath = function getBuildPath() {
  var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Debug';
  var appName = arguments[1];
  var isDevice = arguments[2];

  return 'build/Build/Products/' + configuration + '-' + (isDevice ? 'iphoneos' : 'iphonesimulator') + '/' + appName + '.app';
};

function runIOS(argv, config, args) {
  if (!fs.existsSync(args.projectPath)) {
    var reactNativeScriptsPath = findReactNativeScripts();
    if (reactNativeScriptsPath) {
      child_process.spawnSync(reactNativeScriptsPath, ['ios'].concat(process.argv.slice(1)), { stdio: 'inherit' });
      return;
    } else {
      throw new Error('iOS project folder not found. Are you sure this is a React Native project?');
    }
  }
  process.chdir(args.projectPath);
  var xcodeProject = findXcodeProject(fs.readdirSync('.'));
  if (!xcodeProject) {
    throw new Error('Could not find Xcode project files in ios folder');
  }

  var inferredSchemeName = path.basename(xcodeProject.name, path.extname(xcodeProject.name));
  var scheme = args.scheme || inferredSchemeName;
  console.log('Found Xcode ' + (xcodeProject.isWorkspace ? 'workspace' : 'project') + ' ' + xcodeProject.name);
  var devices = parseIOSDevicesList(child_process.execFileSync('xcrun', ['instruments', '-s'], { encoding: 'utf8' }));
  if (args.device) {
    var selectedDevice = matchingDevice(devices, args.device);
    if (selectedDevice) {
      return runOnDevice(selectedDevice, scheme, xcodeProject, args.configuration, args.packager);
    } else {
      if (devices && devices.length > 0) {
        console.log('Could not find device with the name: "' + args.device + '".');
        console.log('Choose one of the following:');
        printFoundDevices(devices);
      } else {
        console.log('No iOS devices connected.');
      }
    }
  } else if (args.udid) {
    return runOnDeviceByUdid(args, scheme, xcodeProject, devices);
  } else {
    return runOnSimulator(xcodeProject, args, scheme);
  }
}

function runOnDeviceByUdid(args, scheme, xcodeProject, devices) {
  var selectedDevice = matchingDeviceByUdid(devices, args.udid);
  if (selectedDevice) {
    return runOnDevice(selectedDevice, scheme, xcodeProject, args.configuration, args.packager);
  } else {
    if (devices && devices.length > 0) {
      console.log('Could not find device with the udid: "' + args.udid + '".');
      console.log('Choose one of the following:');
      printFoundDevices(devices);
    } else {
      console.log('No iOS devices connected.');
    }
  }
}

function runOnSimulator(xcodeProject, args, scheme) {
  return new Promise(function (resolve) {
    try {
      var simulators = JSON.parse(child_process.execFileSync('xcrun', ['simctl', 'list', '--json', 'devices'], { encoding: 'utf8' }));
    } catch (e) {
      throw new Error('Could not parse the simulator list output');
    }

    var selectedSimulator = findMatchingSimulator(simulators, args.simulator);
    if (!selectedSimulator) {
      throw new Error('Could not find ' + args.simulator + ' simulator');
    }

    var simulatorFullName = formattedDeviceName(selectedSimulator);
    console.log('Launching ' + simulatorFullName + '...');
    try {
      child_process.spawnSync('xcrun', ['instruments', '-w', selectedSimulator.udid]);
    } catch (e) {}
    resolve(selectedSimulator.udid);
  }).then(function (udid) {
    return buildProject(xcodeProject, udid, scheme, args.configuration, args.packager);
  }).then(function (appName) {
    if (!appName) {
      appName = scheme;
    }
    var appPath = getBuildPath(args.configuration, appName);
    console.log('Installing ' + appPath);
    child_process.spawnSync('xcrun', ['simctl', 'install', 'booted', appPath], { stdio: 'inherit' });

    var bundleID = child_process.execFileSync('/usr/libexec/PlistBuddy', ['-c', 'Print:CFBundleIdentifier', path.join(appPath, 'Info.plist')], { encoding: 'utf8' }).trim();

    console.log('Launching ' + bundleID);
    child_process.spawnSync('xcrun', ['simctl', 'launch', 'booted', bundleID], { stdio: 'inherit' });
  });
}

function runOnDevice(selectedDevice, scheme, xcodeProject, configuration, launchPackager) {
  return buildProject(xcodeProject, selectedDevice.udid, scheme, configuration, launchPackager).then(function (appName) {
    if (!appName) {
      appName = scheme;
    }
    var iosDeployInstallArgs = ['--bundle', getBuildPath(configuration, appName, true), '--id', selectedDevice.udid, '--justlaunch'];
    console.log('installing and launching your app on ' + selectedDevice.name + '...');
    var iosDeployOutput = child_process.spawnSync('ios-deploy', iosDeployInstallArgs, { encoding: 'utf8' });
    if (iosDeployOutput.error) {
      console.log('');
      console.log('** INSTALLATION FAILED **');
      console.log('Make sure you have ios-deploy installed globally.');
      console.log('(e.g "npm install -g ios-deploy")');
    } else {
      console.log('** INSTALLATION SUCCEEDED **');
    }
  });
}

function buildProject(xcodeProject, udid, scheme) {
  var configuration = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'Debug';
  var launchPackager = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  return new Promise(function (resolve, reject) {
    var xcodebuildArgs = [xcodeProject.isWorkspace ? '-workspace' : '-project', xcodeProject.name, '-configuration', configuration, '-scheme', scheme, '-destination', 'id=' + udid, '-derivedDataPath', 'build'];
    console.log('Building using "xcodebuild ' + xcodebuildArgs.join(' ') + '"');
    var buildProcess = child_process.spawn('xcodebuild', xcodebuildArgs, getProcessOptions(launchPackager));
    var buildOutput = "";
    buildProcess.stdout.on('data', function (data) {
      console.log(data.toString());
      buildOutput += data.toString();
    });
    buildProcess.stderr.on('data', function (data) {
      console.error(data.toString());
    });
    buildProcess.on('close', function (code) {
      var productNameMatch = /export FULL_PRODUCT_NAME="?(.+).app"?$/m.exec(buildOutput);
      if (productNameMatch && productNameMatch.length && productNameMatch.length > 1) {
        return resolve(productNameMatch[1]);
      }
      return buildProcess.error ? reject(buildProcess.error) : resolve();
    });
  });
}

function matchingDevice(devices, deviceName) {
  if (deviceName === true && devices.length === 1) {
    console.log('Using first available device ' + devices[0].name + ' due to lack of name supplied.');
    return devices[0];
  }
  for (var i = devices.length - 1; i >= 0; i--) {
    if (devices[i].name === deviceName || formattedDeviceName(devices[i]) === deviceName) {
      return devices[i];
    }
  }
}

function matchingDeviceByUdid(devices, udid) {
  for (var i = devices.length - 1; i >= 0; i--) {
    if (devices[i].udid === udid) {
      return devices[i];
    }
  }
}

function formattedDeviceName(simulator) {
  return simulator.name + ' (' + simulator.version + ')';
}

function printFoundDevices(devices) {
  for (var i = devices.length - 1; i >= 0; i--) {
    console.log(devices[i].name + ' Udid: ' + devices[i].udid);
  }
}

function getProcessOptions(launchPackager) {
  if (launchPackager) {
    return {};
  }

  return {
    env: _extends({}, process.env, { RCT_NO_LAUNCH_PACKAGER: true })
  };
}

module.exports = {
  name: 'run-ios',
  description: 'builds your app and starts it on iOS simulator',
  func: runIOS,
  examples: [{
    desc: 'Run on a different simulator, e.g. iPhone 5',
    cmd: 'react-native run-ios --simulator "iPhone 5"'
  }, {
    desc: 'Pass a non-standard location of iOS directory',
    cmd: 'react-native run-ios --project-path "./app/ios"'
  }, {
    desc: "Run on a connected device, e.g. Max's iPhone",
    cmd: 'react-native run-ios --device "Max\'s iPhone"'
  }],
  options: [{
    command: '--simulator [string]',
    description: 'Explicitly set simulator to use',
    default: 'iPhone 6'
  }, {
    command: '--configuration [string]',
    description: 'Explicitly set the scheme configuration to use'
  }, {
    command: '--scheme [string]',
    description: 'Explicitly set Xcode scheme to use'
  }, {
    command: '--project-path [string]',
    description: 'Path relative to project root where the Xcode project ' + '(.xcodeproj) lives. The default is \'ios\'.',
    default: 'ios'
  }, {
    command: '--device [string]',
    description: 'Explicitly set device to use by name.  The value is not required if you have a single device connected.'
  }, {
    command: '--udid [string]',
    description: 'Explicitly set device to use by udid'
  }, {
    command: '--no-packager',
    description: 'Do not launch packager while building'
  }]
};