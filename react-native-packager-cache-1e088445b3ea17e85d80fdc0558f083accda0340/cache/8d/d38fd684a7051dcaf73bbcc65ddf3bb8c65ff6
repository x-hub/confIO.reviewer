var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _rxjs = require("rxjs");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Http = function () {
    function Http() {
        _classCallCheck(this, Http);
    }

    _createClass(Http, [{
        key: "get",
        value: function get(url) {
            return _rxjs.Observable.fromPromise(fetch(url));
        }
    }, {
        key: "getBody",
        value: function getBody(url) {
            return _rxjs.Observable.fromPromise(fetch(url).then(function (e) {
                return e.json();
            }));
        }
    }, {
        key: "post",
        value: function post(url, props) {
            return _rxjs.Observable.fromPromise(fetch(url, _extends({
                method: "POST"
            }, props)));
        }
    }]);

    return Http;
}();

module.exports = new Http();