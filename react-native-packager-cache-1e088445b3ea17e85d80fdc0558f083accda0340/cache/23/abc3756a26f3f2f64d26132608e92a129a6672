

"use strict";

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../../../../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = '/home/bassihassan/Desktop/confIOReviewer/node_modules/react-native/ReactAndroid/src/androidTest/js/TextInputTestModule.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  TokenizedTextExample: {
    displayName: 'TokenizedTextExample'
  },
  TextInputTestApp: {
    displayName: 'TextInputTestApp'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/home/bassihassan/Desktop/confIOReviewer/node_modules/react-native/ReactAndroid/src/androidTest/js/TextInputTestModule.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var BatchedBridge = require('BatchedBridge');
var React = require('React');
var StyleSheet = require('StyleSheet');
var Text = require('Text');
var TextInput = require('TextInput');
var View = require('View');

var Recording = require('NativeModules').Recording;

var app;

var TokenizedTextExample = _wrapComponent('TokenizedTextExample')(function (_React$Component) {
  _inherits(TokenizedTextExample, _React$Component);

  function TokenizedTextExample(props) {
    _classCallCheck(this, TokenizedTextExample);

    var _this = _possibleConstructorReturn(this, (TokenizedTextExample.__proto__ || Object.getPrototypeOf(TokenizedTextExample)).call(this, props));

    _this.state = { text: '' };
    return _this;
  }

  _createClass(TokenizedTextExample, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var delimiter = /\s+/;

      var _text = this.state.text;
      var token = void 0,
          index = void 0,
          parts = [];
      while (_text) {
        delimiter.lastIndex = 0;
        token = delimiter.exec(_text);
        if (token === null) {
          break;
        }
        index = token.index;
        if (token[0].length === 0) {
          index = 1;
        }
        parts.push(_text.substr(0, index));
        parts.push(token[0]);
        index = index + token[0].length;
        _text = _text.slice(index);
      }
      parts.push(_text);

      parts = parts.map(function (text) {
        if (/^#/.test(text)) {
          return React.createElement(
            Text,
            { key: text, style: styles.hashtag, __source: {
                fileName: _jsxFileName,
                lineNumber: 58
              }
            },
            text
          );
        } else {
          return text;
        }
      });

      return React.createElement(
        View,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 65
          }
        },
        React.createElement(
          TextInput,
          {
            ref: 'tokenizedInput',
            testID: 'tokenizedInput',
            multiline: true,
            style: styles.multiline,
            onChangeText: function onChangeText(text) {
              _this2.setState({ text: text });
            }, __source: {
              fileName: _jsxFileName,
              lineNumber: 66
            }
          },
          React.createElement(
            Text,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 74
              }
            },
            parts
          )
        )
      );
    }
  }]);

  return TokenizedTextExample;
}(React.Component));

var TextInputTestApp = _wrapComponent('TextInputTestApp')(function (_React$Component2) {
  _inherits(TextInputTestApp, _React$Component2);

  function TextInputTestApp() {
    var _ref;

    var _temp, _this3, _ret;

    _classCallCheck(this, TextInputTestApp);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this3 = _possibleConstructorReturn(this, (_ref = TextInputTestApp.__proto__ || Object.getPrototypeOf(TextInputTestApp)).call.apply(_ref, [this].concat(args))), _this3), _this3.handleOnSubmitEditing = function (record) {
      Recording.record(record);
    }, _temp), _possibleConstructorReturn(_this3, _ret);
  }

  _createClass(TextInputTestApp, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      app = this;
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 92
          }
        },
        React.createElement(TextInput, {
          style: styles.textInputHeight,
          autoCorrect: true,
          autoFocus: true,
          keyboardType: 'numeric',
          multiline: true,
          secureTextEntry: true,
          defaultValue: 'This is text',
          testID: 'textInput1',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 93
          }
        }),
        React.createElement(TextInput, {
          style: styles.textInput,
          autoCapitalize: 'sentences',
          autoCorrect: false,
          autoFocus: false,
          keyboardType: 'default',
          multiline: false,
          secureTextEntry: false,
          placeholder: '1234',
          testID: 'textInput2',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 103
          }
        }),
        React.createElement(TextInput, {
          ref: 'textInput3',
          style: styles.textInput,
          defaultValue: 'Hello, World',
          testID: 'textInput3',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 114
          }
        }),
        React.createElement(TextInput, {
          ref: 'textInput4',
          style: [styles.textInput, { color: '#00ff00' }],
          testID: 'textInput4',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 120
          }
        }),
        React.createElement(TextInput, {
          ref: 'textInput5',
          style: [styles.textInput, { color: '#00ff00' }],
          defaultValue: '',
          testID: 'textInput5',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 125
          }
        }),
        React.createElement(TextInput, {
          ref: 'textInput6',
          style: [styles.textInput, { color: '#00ff00' }],
          defaultValue: 'Text',
          testID: 'textInput6',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 131
          }
        }),
        React.createElement(TextInput, {
          ref: 'onSubmitTextInput',
          onSubmitEditing: this.handleOnSubmitEditing.bind(this, 'onSubmit'),
          defaultValue: '',
          testID: 'onSubmitTextInput',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 137
          }
        }),
        React.createElement(TokenizedTextExample, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 143
          }
        })
      );
    }
  }]);

  return TextInputTestApp;
}(React.Component));

var styles = StyleSheet.create({
  container: {
    padding: 5,
    margin: 10
  },
  textInputHeight: {
    fontSize: 21,
    height: 30
  },
  textInput: {
    fontSize: 21,
    padding: 0
  },
  hashtag: {
    color: 'blue',
    fontWeight: 'bold'
  }
});

var TextInputTestModule = {
  TextInputTestApp: TextInputTestApp,
  setValueRef: function setValueRef(ref, value) {
    app.refs[ref].setNativeProps({
      text: value
    });
  }
};

BatchedBridge.registerCallableModule('TextInputTestModule', TextInputTestModule);

module.exports = TextInputTestModule;