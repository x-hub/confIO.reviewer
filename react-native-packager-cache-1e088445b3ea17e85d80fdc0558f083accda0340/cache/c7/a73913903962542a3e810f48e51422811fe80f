Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _actionsType = require("../App/actionsType");

var _nativeStorage = require("../App/Services/nativeStorage");

var _nativeStorage2 = _interopRequireDefault(_nativeStorage);

var _index = require("../Login/LoginWithSavedSession/index");

var _navigator = require("../Navigator/navigator.actions");

var _navigator2 = _interopRequireDefault(_navigator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        event: null,
        talk: {},
        speakers: [],
        selectedSpeaker: {},
        IsReady: false,
        showSpeakerDetail: false,
        type: ""
    };
    var _ref = arguments[1];
    var type = _ref.type,
        payload = _ref.payload;

    switch (type) {
        case _index.actions.SELECT_EVENT:
        case _navigator2.default.GOTO_Home:
            return _extends({}, state, {
                event: payload.event
            });
        case _navigator2.default.GOTO_Detail:
            return _extends({}, state, payload, {
                IsReady: true
            });

        case _actionsType.ACTIONS.SELECT_SPEAKER:
            return _extends({}, state, {
                selectedSpeaker: state.speakers[payload],
                showSpeakerDetail: true
            });
        case _actionsType.ACTIONS.TOGGLE_SPEAKER_DETAIL:
            return _extends({}, state, {
                showSpeakerDetail: payload
            });
        case _actionsType.ACTIONS.SET_CONTENT_PLACEHOLDER_STATE:
            return _extends({}, state, {
                IsReady: payload
            });
        default:
            return state;
    }
};