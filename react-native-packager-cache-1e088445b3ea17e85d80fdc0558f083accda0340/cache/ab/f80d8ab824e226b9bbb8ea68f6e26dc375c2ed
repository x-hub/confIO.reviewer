var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _rxjs = require('rxjs');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var nativeStorage = function () {
    function nativeStorage() {
        _classCallCheck(this, nativeStorage);
    }

    _createClass(nativeStorage, [{
        key: 'save',
        value: function save(key, value) {
            return this.toObservable(!_lodash2.default.isArray(key) ? _reactNative.AsyncStorage.setItem(key, JSON.stringify(value)) : _reactNative.AsyncStorage.multiSet(_lodash2.default.zip(key, value.map(JSON.stringify))));
        }
    }, {
        key: 'get',
        value: function get(key) {
            return this.toObservable(!_lodash2.default.isArray(key) ? _reactNative.AsyncStorage.getItem(key).then(JSON.parse) : _reactNative.AsyncStorage.multiGet(key).then(function (e) {
                var unzipArray = _lodash2.default.unzip(e);
                var keys = unzipArray[0];
                var values = unzipArray[1].map(JSON.parse);
                return _lodash2.default.zipObject(keys, values);
            }));
        }
    }, {
        key: 'getArray',
        value: function getArray(keys) {
            if (keys.length == 0) return _rxjs.Observable.of([]);
            return this.toObservable(_reactNative.AsyncStorage.multiGet(keys).then(function (e) {
                var unzipArray = _lodash2.default.unzip(e);
                return unzipArray[1].map(JSON.parse);
            }));
        }
    }, {
        key: 'getAllKeys',
        value: function getAllKeys() {
            return this.toObservable(_reactNative.AsyncStorage.getAllKeys());
        }
    }, {
        key: 'update',
        value: function update(key, value) {
            return this.toObservable(_reactNative.AsyncStorage.setItem(key, JSON.stringify(value)));
        }
    }, {
        key: 'merge',
        value: function merge(key, value) {
            return this.toObservable(!_lodash2.default.isArray(key) ? _reactNative.AsyncStorage.mergeItem(key, JSON.stringify(value)) : _reactNative.AsyncStorage.multiMerge(_lodash2.default.zip(key, value)));
        }
    }, {
        key: 'remove',
        value: function remove(key) {
            return this.toObservable(!_lodash2.default.isArray(key) ? _reactNative.AsyncStorage.removeItem(key) : _reactNative.AsyncStorage.multiRemove(key));
        }
    }, {
        key: 'clear',
        value: function clear() {
            return this.toObservable(_reactNative.AsyncStorage.clear());
        }
    }, {
        key: 'toObservable',
        value: function toObservable(promise) {
            return _rxjs.Observable.fromPromise(promise);
        }
    }]);

    return nativeStorage;
}();

module.exports = new nativeStorage();