Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.actions = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _loginWithSavedSession = require('./loginWithSavedSession.template');

var _loginWithSavedSession2 = _interopRequireDefault(_loginWithSavedSession);

var _reactRedux = require('react-redux');

var _redux = require('redux');

var _EventDetailsDialog = require('../../EventDetailsDialog');

var _nativeStorage = require('../../App/Services/nativeStorage');

var _nativeStorage2 = _interopRequireDefault(_nativeStorage);

var _ = require('..');

var _index = require('../../Feed/index');

var _rxjs = require('rxjs');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var actions = exports.actions = {
    FETCH_ALL_EVENTS: 'FETCH_ALL_EVENTS',
    SELECT_EVENT: 'SELECT_EVENT',
    SHOW_EVENT_DETAILS: 'SHOW_EVENT_DETAILS',
    HIDE_EVENT_DETAILS: 'HIDE_EVENT_DETAILS',
    DELETE_EVENT: 'DELETE_EVENT'
};

var actionCreators = {
    fetchEvents: fetchEvents,
    selectEvent: selectEvent,
    showEventDetails: showEventDetails,
    hideEventDetails: hideEventDetails,
    deleteEvent: deleteEvent,
    GOTOHome: _index.GOTOHome
};

function readEventsFromStorage() {
    return _nativeStorage2.default.get('events').switchMap(function (events) {
        return _rxjs.Observable.forkJoin(events.map(readEventDetails));
    });


    function readEventDetails(eventCode) {
        alert(eventCode);
        return _nativeStorage2.default.get('event-' + eventCode).switchMap(function (event) {
            return _rxjs.Observable.of(event || {});
        });
    }
}

function deleteEventFromStorage(eventToDelete) {
    return readEventsFromStorage().switchMap(function (events) {
        var updatedEventsList = events.filter(function (event) {
            return event.code != eventToDelete.code;
        });
        var updatedEventsCodeList = updatedEventsList.map(function (event) {
            return event.code;
        });
        return _rxjs.Observable.forkJoin([, _nativeStorage2.default.remove('event-' + eventToDelete.code), _nativeStorage2.default.save('events', updatedEventsCodeList)]).switchMap(function () {
            return _rxjs.Observable.of(updatedEventsList);
        });
    });
}

function fetchEvents() {
    var events = readEventsFromStorage().toPromise();
    return {
        type: actions.FETCH_ALL_EVENTS,
        payload: events
    };
}

function selectEvent(e) {

    return {
        type: actions.SELECT_EVENT,
        payload: (0, _.fetchTalks)(e)
    };
}

function deleteEvent(e) {
    var updatedEvents = deleteEventFromStorage(e).toPromise();
    return {
        type: actions.DELETE_EVENT,
        payload: updatedEvents
    };
}

function showEventDetails(e) {
    return {
        type: actions.SHOW_EVENT_DETAILS,
        payload: e
    };
}

function hideEventDetails(e) {
    return {
        type: actions.HIDE_EVENT_DETAILS
    };
}

function mapStateToProps(state) {
    return state.loginWithSavedSession;
}

function mapDispatchToProps(dispatch) {
    return (0, _redux.bindActionCreators)(actionCreators, dispatch);
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_loginWithSavedSession2.default);