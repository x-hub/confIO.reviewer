

'use strict';

var BatchedBridge = require('BatchedBridge');

var _require = require('Asserts'),
    assertEquals = _require.assertEquals,
    assertTrue = _require.assertTrue;

function strictStringCompare(a, b) {
  if (typeof a !== 'string' || typeof b !== 'string' || a.length !== b.length) {
    return false;
  }
  for (var i = 0; i < a.length; i++) {
    if (a.charCodeAt(i) !== b.charCodeAt(i)) {
      return false;
    }
  }
  return true;
}

function assertStrictStringEquals(a, b) {
  assertTrue(strictStringCompare(a, b), 'Expected: ' + a + ', received: ' + b);
}

var TestJavaToJSArgumentsModule = {
  receiveBasicTypes: function receiveBasicTypes(str, dbl, bool, null_arg) {
    assertEquals("foo", str);
    assertEquals(3.14, dbl);
    assertEquals(true, bool);
    assertEquals(null, null_arg);
  },
  receiveArrayWithBasicTypes: function receiveArrayWithBasicTypes(arr) {
    assertEquals(4, arr.length);
    assertEquals("red panda", arr[0]);
    assertEquals(1.19, arr[1]);
    assertEquals(true, arr[2]);
    assertEquals(null, arr[3]);
  },
  receiveNestedArray: function receiveNestedArray(arr) {
    assertEquals(2, arr.length);
    assertEquals("level1", arr[0]);
    var arr2 = arr[1];
    assertEquals("level2", arr2[0]);
    var arr3 = arr2[1];
    assertEquals("level3", arr3[0]);
  },
  receiveArrayWithMaps: function receiveArrayWithMaps(arr) {
    assertEquals(2, arr.length);
    var m1 = arr[0];
    var m2 = arr[1];
    assertEquals("m1v1", m1["m1k1"]);
    assertEquals("m1v2", m1["m1k2"]);
    assertEquals("m2v1", m2["m2k1"]);
  },
  receiveMapWithBasicTypes: function receiveMapWithBasicTypes(map) {
    assertEquals("stringValue", map["stringKey"]);
    assertEquals(3.14, map["doubleKey"]);
    assertEquals(true, map["booleanKey"]);
    assertEquals(null, map["nullKey"]);
  },
  receiveNestedMap: function receiveNestedMap(map) {
    var nestedMap = map["nestedMap"];
    assertEquals("foxes", nestedMap["animals"]);
  },
  receiveMapWithArrays: function receiveMapWithArrays(map) {
    var a1 = map["array1"];
    var a2 = map["array2"];
    assertEquals(3, a1.length);
    assertEquals(2, a2.length);
    assertEquals(3, a1[0]);
    assertEquals(9, a2[1]);
  },
  receiveMapAndArrayWithNullValues: function receiveMapAndArrayWithNullValues(map, array) {
    assertEquals(null, map.string);
    assertEquals(null, map.array);
    assertEquals(null, map.map);

    assertEquals(null, array[0]);
    assertEquals(null, array[1]);
    assertEquals(null, array[2]);
  },
  receiveMapWithMultibyteUTF8CharacterString: function receiveMapWithMultibyteUTF8CharacterString(map) {
    assertStrictStringEquals('\xA2', map['two-bytes']);
    assertStrictStringEquals('\u20AC', map['three-bytes']);
    assertStrictStringEquals('\uD83D\uDE1C', map['four-bytes']);
    assertStrictStringEquals('\u017C\xF3\u0142\u0107 g\u0119\u015Bl\u0105 \u6211 \uD83D\uDE0E ja\u017A\u0107', map.mixed);
  },
  receiveArrayWithMultibyteUTF8CharacterString: function receiveArrayWithMultibyteUTF8CharacterString(array) {
    assertTrue(true);
    assertStrictStringEquals('\xA2', array[0]);
    assertStrictStringEquals('\u20AC', array[1]);
    assertStrictStringEquals('\uD83D\uDE1C', array[2]);
    assertStrictStringEquals('\u017C\xF3\u0142\u0107 g\u0119\u015Bl\u0105 \u6211 \uD83D\uDE0E ja\u017A\u0107', array[3]);
  }
};

BatchedBridge.registerCallableModule('TestJavaToJSArgumentsModule', TestJavaToJSArgumentsModule);

module.exports = TestJavaToJSArgumentsModule;