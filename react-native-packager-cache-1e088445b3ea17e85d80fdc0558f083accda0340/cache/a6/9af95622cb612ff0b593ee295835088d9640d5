

'use strict';

var _jsxFileName = '/home/bassihassan/Desktop/confIOReviewer/node_modules/react-native/ReactAndroid/src/androidTest/js/UIManagerTestModule.js';
var BatchedBridge = require('BatchedBridge');
var React = require('React');
var StyleSheet = require('StyleSheet');
var View = require('View');
var Text = require('Text');

var createReactClass = require('create-react-class');
var renderApplication = require('renderApplication');

var FlexTestApp = createReactClass({
  displayName: 'FlexTestApp',
  _styles: StyleSheet.create({
    container: {
      width: 200,
      height: 200,
      flexDirection: 'row'
    },
    child: {
      flex: 1
    },
    absolute: {
      position: 'absolute',
      top: 15,
      left: 10,
      width: 50,
      height: 60
    }
  }),
  render: function render() {
    return React.createElement(
      View,
      { style: this._styles.container, testID: 'container', collapsable: false, __source: {
          fileName: _jsxFileName,
          lineNumber: 44
        }
      },
      React.createElement(View, { style: [this._styles.child, { backgroundColor: '#ff0000' }], collapsable: false, __source: {
          fileName: _jsxFileName,
          lineNumber: 45
        }
      }),
      React.createElement(View, { style: [this._styles.child, { backgroundColor: '#0000ff' }], collapsable: false, __source: {
          fileName: _jsxFileName,
          lineNumber: 46
        }
      })
    );
  }
});

var FlexWithText = createReactClass({
  displayName: 'FlexWithText',
  _styles: StyleSheet.create({
    container: {
      flexDirection: 'column',
      margin: 20
    },
    row: {
      flexDirection: 'row',
      alignItems: 'flex-end',
      height: 300
    },
    inner: {
      flex: 1,
      margin: 10
    }
  }),
  render: function render() {
    return React.createElement(
      View,
      { style: this._styles.container, testID: 'container', collapsable: false, __source: {
          fileName: _jsxFileName,
          lineNumber: 71
        }
      },
      React.createElement(
        View,
        { style: this._styles.row, collapsable: false, __source: {
            fileName: _jsxFileName,
            lineNumber: 72
          }
        },
        React.createElement(
          Text,
          { style: this._styles.inner, __source: {
              fileName: _jsxFileName,
              lineNumber: 73
            }
          },
          'Hello'
        ),
        React.createElement(
          Text,
          { style: this._styles.inner, __source: {
              fileName: _jsxFileName,
              lineNumber: 74
            }
          },
          'World'
        )
      )
    );
  }
});

var AbsolutePositionTestApp = createReactClass({
  displayName: 'AbsolutePositionTestApp',
  _styles: StyleSheet.create({
    absolute: {
      position: 'absolute',
      top: 15,
      left: 10,
      width: 50,
      height: 60
    }
  }),
  render: function render() {
    return React.createElement(View, { style: this._styles.absolute, testID: 'absolute', collapsable: false, __source: {
        fileName: _jsxFileName,
        lineNumber: 93
      }
    });
  }
});

var AbsolutePositionBottomRightTestApp = createReactClass({
  displayName: 'AbsolutePositionBottomRightTestApp',
  _styles: StyleSheet.create({
    container: {
      width: 100,
      height: 100
    },
    absolute: {
      position: 'absolute',
      bottom: 15,
      right: 10,
      width: 50,
      height: 60
    }
  }),
  render: function render() {
    return React.createElement(
      View,
      { style: this._styles.container, testID: 'container', collapsable: false, __source: {
          fileName: _jsxFileName,
          lineNumber: 114
        }
      },
      React.createElement(View, { style: this._styles.absolute, collapsable: false, __source: {
          fileName: _jsxFileName,
          lineNumber: 115
        }
      })
    );
  }
});

var CenteredTextView = createReactClass({
  displayName: 'CenteredTextView',
  _styles: StyleSheet.create({
    parent: {
      width: 200,
      height: 100,
      backgroundColor: '#aa3311',
      justifyContent: 'center',
      alignItems: 'center'
    },
    text: {
      fontSize: 15,
      color: '#672831'
    }
  }),
  render: function render() {
    return React.createElement(
      View,
      { collapsable: false, __source: {
          fileName: _jsxFileName,
          lineNumber: 138
        }
      },
      React.createElement(
        View,
        { style: this._styles.parent, collapsable: false, __source: {
            fileName: _jsxFileName,
            lineNumber: 139
          }
        },
        React.createElement(
          Text,
          { style: this._styles.text, testID: 'text', __source: {
              fileName: _jsxFileName,
              lineNumber: 140
            }
          },
          this.props.text
        )
      )
    );
  }
});

var _flushUpdatePositionInList = null;
var UpdatePositionInListTestApp = createReactClass({
  displayName: 'UpdatePositionInListTestApp',
  _styles: StyleSheet.create({
    element: {
      height: 10
    },
    active: {
      height: 50
    }
  }),
  getInitialState: function getInitialState() {
    var _this = this;

    _flushUpdatePositionInList = function flushUpdatePositionInList() {
      return _this.setState({ active: true });
    };
    return { active: false };
  },
  render: function render() {
    return React.createElement(
      View,
      { collapsable: false, testID: 'container', __source: {
          fileName: _jsxFileName,
          lineNumber: 164
        }
      },
      React.createElement(View, { style: this._styles.element, collapsable: false, __source: {
          fileName: _jsxFileName,
          lineNumber: 165
        }
      }),
      React.createElement(View, {
        style: [this._styles.element, this.state.active && this._styles.active],
        collapsable: false,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 166
        }
      }),
      React.createElement(View, { style: this._styles.element, collapsable: false, __source: {
          fileName: _jsxFileName,
          lineNumber: 173
        }
      })
    );
  }
});

var UIManagerTestModule = {
  renderFlexTestApplication: function renderFlexTestApplication(rootTag) {
    renderApplication(FlexTestApp, {}, rootTag);
  },
  renderFlexWithTextApplication: function renderFlexWithTextApplication(rootTag) {
    renderApplication(FlexWithText, {}, rootTag);
  },
  renderAbsolutePositionBottomRightTestApplication: function renderAbsolutePositionBottomRightTestApplication(rootTag) {
    renderApplication(AbsolutePositionBottomRightTestApp, {}, rootTag);
  },
  renderAbsolutePositionTestApplication: function renderAbsolutePositionTestApplication(rootTag) {
    renderApplication(AbsolutePositionTestApp, {}, rootTag);
  },
  renderCenteredTextViewTestApplication: function renderCenteredTextViewTestApplication(rootTag, text) {
    renderApplication(CenteredTextView, { text: text }, rootTag);
  },
  renderUpdatePositionInListTestApplication: function renderUpdatePositionInListTestApplication(rootTag) {
    renderApplication(UpdatePositionInListTestApp, {}, rootTag);
  },
  flushUpdatePositionInList: function flushUpdatePositionInList() {
    _flushUpdatePositionInList();
  }
};

BatchedBridge.registerCallableModule('UIManagerTestModule', UIManagerTestModule);

module.exports = UIManagerTestModule;