var xcode = require('xcode');
var path = require('path');
var fs = require('fs');
var difference = require('lodash').difference;
var isEmpty = require('lodash').isEmpty;

var getGroup = require('./getGroup');
var getProducts = require('./getProducts');
var getHeadersInFolder = require('./getHeadersInFolder');
var getHeaderSearchPath = require('./getHeaderSearchPath');
var removeProjectFromProject = require('./removeProjectFromProject');
var removeProjectFromLibraries = require('./removeProjectFromLibraries');
var removeFromStaticLibraries = require('./removeFromStaticLibraries');
var removeFromHeaderSearchPaths = require('./removeFromHeaderSearchPaths');
var removeSharedLibraries = require('./removeSharedLibraries');

module.exports = function unregisterNativeModule(dependencyConfig, projectConfig, iOSDependencies) {
  var project = xcode.project(projectConfig.pbxprojPath).parseSync();
  var dependencyProject = xcode.project(dependencyConfig.pbxprojPath).parseSync();

  var libraries = getGroup(project, projectConfig.libraryFolder);

  var file = removeProjectFromProject(project, path.relative(projectConfig.sourceDir, dependencyConfig.projectPath));

  removeProjectFromLibraries(libraries, file);

  getProducts(dependencyProject).forEach(function (product) {
    removeFromStaticLibraries(project, product, {
      target: project.getFirstTarget().uuid
    });
  });

  var sharedLibraries = difference(dependencyConfig.sharedLibraries, iOSDependencies.reduce(function (libs, dependency) {
    return libs.concat(dependency.sharedLibraries);
  }, projectConfig.sharedLibraries));

  removeSharedLibraries(project, sharedLibraries);

  var headers = getHeadersInFolder(dependencyConfig.folder);
  if (!isEmpty(headers)) {
    removeFromHeaderSearchPaths(project, getHeaderSearchPath(projectConfig.sourceDir, headers));
  }

  fs.writeFileSync(projectConfig.pbxprojPath, project.writeSync());
};