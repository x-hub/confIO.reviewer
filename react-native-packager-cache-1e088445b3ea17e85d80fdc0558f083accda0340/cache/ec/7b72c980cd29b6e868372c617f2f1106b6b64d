

'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../../../../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = '/home/bassihassan/Desktop/confIOReviewer/node_modules/react-native/ReactAndroid/src/androidTest/js/MeasureLayoutTestModule.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  MeasureLayoutTestApp: {
    displayName: 'MeasureLayoutTestApp'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/home/bassihassan/Desktop/confIOReviewer/node_modules/react-native/ReactAndroid/src/androidTest/js/MeasureLayoutTestModule.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var BatchedBridge = require('BatchedBridge');
var React = require('React');
var ReactNative = require('ReactNative');
var View = require('View');
var StyleSheet = require('StyleSheet');
var UIManager = require('UIManager');

var assertEquals = require('Asserts').assertEquals;

var styles = StyleSheet.create({
  A: {
    "width": 500,
    "height": 500
  },
  B: {
    backgroundColor: "rgb(255, 0, 0)",
    "left": 50,
    "top": 80,
    "width": 200,
    "height": 300
  },
  C: {
    backgroundColor: "rgb(0, 255, 0)",
    "left": 100,
    "top": 70,
    "width": 50,
    "height": 150
  },
  D: {
    backgroundColor: "rgb(0, 0, 255)",
    "left": 400,
    "top": 100,
    "width": 50,
    "height": 200
  }
});

var A, B, C, D;

var MeasureLayoutTestApp = _wrapComponent('MeasureLayoutTestApp')(function (_React$Component) {
  _inherits(MeasureLayoutTestApp, _React$Component);

  function MeasureLayoutTestApp() {
    _classCallCheck(this, MeasureLayoutTestApp);

    return _possibleConstructorReturn(this, (MeasureLayoutTestApp.__proto__ || Object.getPrototypeOf(MeasureLayoutTestApp)).apply(this, arguments));
  }

  _createClass(MeasureLayoutTestApp, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      A = ReactNative.findNodeHandle(this.refs.A);
      B = ReactNative.findNodeHandle(this.refs.B);
      C = ReactNative.findNodeHandle(this.refs.C);
      D = ReactNative.findNodeHandle(this.refs.D);
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { ref: 'A', style: styles.A, collapsable: false, __source: {
            fileName: _jsxFileName,
            lineNumber: 63
          }
        },
        React.createElement(
          View,
          { ref: 'B', style: styles.B, collapsable: false, __source: {
              fileName: _jsxFileName,
              lineNumber: 64
            }
          },
          React.createElement(View, { ref: 'C', style: styles.C, collapsable: false, __source: {
              fileName: _jsxFileName,
              lineNumber: 65
            }
          })
        ),
        React.createElement(View, { ref: 'D', style: styles.D, collapsable: false, __source: {
            fileName: _jsxFileName,
            lineNumber: 67
          }
        })
      );
    }
  }]);

  return MeasureLayoutTestApp;
}(React.Component));

function shouldNotCallThisCallback() {
  assertEquals(false, true);
}

var MeasureLayoutTestModule = {
  MeasureLayoutTestApp: MeasureLayoutTestApp,
  verifyMeasureOnViewA: function verifyMeasureOnViewA() {
    UIManager.measure(A, function (a, b, width, height, x, y) {
      assertEquals(500, width);
      assertEquals(500, height);
      assertEquals(0, x);
      assertEquals(0, y);
    });
  },
  verifyMeasureOnViewC: function verifyMeasureOnViewC() {
    UIManager.measure(C, function (a, b, width, height, x, y) {
      assertEquals(50, width);
      assertEquals(150, height);
      assertEquals(150, x);
      assertEquals(150, y);
    });
  },
  verifyMeasureLayoutCRelativeToA: function verifyMeasureLayoutCRelativeToA() {
    UIManager.measureLayout(C, A, shouldNotCallThisCallback, function (x, y, width, height) {
      assertEquals(50, width);
      assertEquals(150, height);
      assertEquals(150, x);
      assertEquals(150, y);
    });
  },
  verifyMeasureLayoutCRelativeToB: function verifyMeasureLayoutCRelativeToB() {
    UIManager.measureLayout(C, B, shouldNotCallThisCallback, function (x, y, width, height) {
      assertEquals(50, width);
      assertEquals(150, height);
      assertEquals(100, x);
      assertEquals(70, y);
    });
  },
  verifyMeasureLayoutCRelativeToSelf: function verifyMeasureLayoutCRelativeToSelf() {
    UIManager.measureLayout(C, C, shouldNotCallThisCallback, function (x, y, width, height) {
      assertEquals(50, width);
      assertEquals(150, height);
      assertEquals(0, x);
      assertEquals(0, y);
    });
  },
  verifyMeasureLayoutRelativeToParentOnViewA: function verifyMeasureLayoutRelativeToParentOnViewA() {
    UIManager.measureLayoutRelativeToParent(A, shouldNotCallThisCallback, function (x, y, width, height) {
      assertEquals(500, width);
      assertEquals(500, height);
      assertEquals(0, x);
      assertEquals(0, y);
    });
  },
  verifyMeasureLayoutRelativeToParentOnViewB: function verifyMeasureLayoutRelativeToParentOnViewB() {
    UIManager.measureLayoutRelativeToParent(B, shouldNotCallThisCallback, function (x, y, width, height) {
      assertEquals(200, width);
      assertEquals(300, height);
      assertEquals(50, x);
      assertEquals(80, y);
    });
  },
  verifyMeasureLayoutRelativeToParentOnViewC: function verifyMeasureLayoutRelativeToParentOnViewC() {
    UIManager.measureLayoutRelativeToParent(C, shouldNotCallThisCallback, function (x, y, width, height) {
      assertEquals(50, width);
      assertEquals(150, height);
      assertEquals(100, x);
      assertEquals(70, y);
    });
  },
  verifyMeasureLayoutDRelativeToB: function verifyMeasureLayoutDRelativeToB() {
    UIManager.measureLayout(D, B, function () {
      assertEquals(true, true);
    }, shouldNotCallThisCallback);
  },
  verifyMeasureLayoutNonExistentTag: function verifyMeasureLayoutNonExistentTag() {
    UIManager.measureLayout(192, A, function () {
      assertEquals(true, true);
    }, shouldNotCallThisCallback);
  },
  verifyMeasureLayoutNonExistentAncestor: function verifyMeasureLayoutNonExistentAncestor() {
    UIManager.measureLayout(B, 192, function () {
      assertEquals(true, true);
    }, shouldNotCallThisCallback);
  },
  verifyMeasureLayoutRelativeToParentNonExistentTag: function verifyMeasureLayoutRelativeToParentNonExistentTag() {
    UIManager.measureLayoutRelativeToParent(192, function () {
      assertEquals(true, true);
    }, shouldNotCallThisCallback);
  }
};

BatchedBridge.registerCallableModule('MeasureLayoutTestModule', MeasureLayoutTestModule);

module.exports = MeasureLayoutTestModule;