

'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../../../../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = '/home/bassihassan/Desktop/confIOReviewer/node_modules/react-native/ReactAndroid/src/androidTest/js/SubviewsClippingTestModule.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  ClippingSample1: {
    displayName: 'ClippingSample1'
  },
  ClippingSample2: {
    displayName: 'ClippingSample2'
  },
  UpdatingSample1: {
    displayName: 'UpdatingSample1'
  },
  UpdatingSample2: {
    displayName: 'UpdatingSample2'
  },
  ScrollViewTest: {
    displayName: 'ScrollViewTest'
  },
  SubviewsClippingTestApp: {
    displayName: 'SubviewsClippingTestApp'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/home/bassihassan/Desktop/confIOReviewer/node_modules/react-native/ReactAndroid/src/androidTest/js/SubviewsClippingTestModule.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var BatchedBridge = require('BatchedBridge');
var React = require('React');
var ReactNativeViewAttributes = require('ReactNativeViewAttributes');
var ScrollView = require('ScrollView');
var StyleSheet = require('StyleSheet');
var View = require('View');

var requireNativeComponent = require('requireNativeComponent');

var ClippableView = requireNativeComponent('ClippableView', null);

var ClippingSample1 = _wrapComponent('ClippingSample1')(function (_React$Component) {
  _inherits(ClippingSample1, _React$Component);

  function ClippingSample1() {
    _classCallCheck(this, ClippingSample1);

    return _possibleConstructorReturn(this, (ClippingSample1.__proto__ || Object.getPrototypeOf(ClippingSample1)).apply(this, arguments));
  }

  _createClass(ClippingSample1, [{
    key: 'render',
    value: function render() {
      var styles = sample1Styles;
      return React.createElement(
        View,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 29
          }
        },
        React.createElement(
          ClippableView,
          { clippableViewID: 'outer', style: styles.outer, removeClippedSubviews: true, __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          },
          React.createElement(ClippableView, { clippableViewID: 'inner1', style: [styles.inner, styles.inner1], __source: {
              fileName: _jsxFileName,
              lineNumber: 31
            }
          }),
          React.createElement(ClippableView, { clippableViewID: 'inner2', style: [styles.inner, styles.inner2], __source: {
              fileName: _jsxFileName,
              lineNumber: 32
            }
          }),
          React.createElement(ClippableView, { clippableViewID: 'inner3', style: [styles.inner, styles.inner3], __source: {
              fileName: _jsxFileName,
              lineNumber: 33
            }
          }),
          React.createElement(ClippableView, { clippableViewID: 'inner4', style: [styles.inner, styles.inner4], __source: {
              fileName: _jsxFileName,
              lineNumber: 34
            }
          }),
          React.createElement(ClippableView, { clippableViewID: 'inner5', style: [styles.inner, styles.inner5], __source: {
              fileName: _jsxFileName,
              lineNumber: 35
            }
          })
        )
      );
    }
  }]);

  return ClippingSample1;
}(React.Component));

var sample1Styles = StyleSheet.create({
  outer: {
    width: 200,
    height: 200,
    backgroundColor: 'red'
  },
  inner: {
    position: 'absolute',
    width: 100,
    height: 100,
    backgroundColor: 'green'
  },
  inner1: {
    top: -150,
    left: 50
  },
  inner2: {
    top: 50,
    left: 50
  },
  inner3: {
    top: 250,
    left: 50
  },
  inner4: {
    left: -150,
    top: 50
  },
  inner5: {
    left: 250,
    top: 50
  }
});

var ClippingSample2 = _wrapComponent('ClippingSample2')(function (_React$Component2) {
  _inherits(ClippingSample2, _React$Component2);

  function ClippingSample2() {
    _classCallCheck(this, ClippingSample2);

    return _possibleConstructorReturn(this, (ClippingSample2.__proto__ || Object.getPrototypeOf(ClippingSample2)).apply(this, arguments));
  }

  _createClass(ClippingSample2, [{
    key: 'render',
    value: function render() {
      var styles = sample2Styles;
      return React.createElement(
        View,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 80
          }
        },
        React.createElement(
          ClippableView,
          { clippableViewID: 'outer', style: styles.outer, removeClippedSubviews: true, __source: {
              fileName: _jsxFileName,
              lineNumber: 81
            }
          },
          React.createElement(
            ClippableView,
            {
              clippableViewID: 'complexInner',
              style: styles.complexInner,
              removeClippedSubviews: true, __source: {
                fileName: _jsxFileName,
                lineNumber: 82
              }
            },
            React.createElement(ClippableView, { clippableViewID: 'inner1', style: [styles.inner, styles.inner1], __source: {
                fileName: _jsxFileName,
                lineNumber: 86
              }
            }),
            React.createElement(ClippableView, { clippableViewID: 'inner2', style: [styles.inner, styles.inner2], __source: {
                fileName: _jsxFileName,
                lineNumber: 87
              }
            }),
            React.createElement(ClippableView, { clippableViewID: 'inner3', style: [styles.inner, styles.inner3], __source: {
                fileName: _jsxFileName,
                lineNumber: 88
              }
            }),
            React.createElement(ClippableView, { clippableViewID: 'inner4', style: [styles.inner, styles.inner4], __source: {
                fileName: _jsxFileName,
                lineNumber: 89
              }
            })
          )
        )
      );
    }
  }]);

  return ClippingSample2;
}(React.Component));

var sample2Styles = StyleSheet.create({
  outer: {
    width: 200,
    height: 200,
    backgroundColor: 'red'
  },
  complexInner: {
    position: 'absolute',
    width: 200,
    height: 200,
    left: 100,
    top: 100,
    backgroundColor: 'green'
  },
  inner: {
    position: 'absolute',
    width: 80,
    height: 80,
    backgroundColor: 'blue'
  },
  inner1: {
    left: 10,
    top: 10
  },
  inner2: {
    right: 10,
    top: 10
  },
  inner3: {
    left: 10,
    bottom: 10
  },
  inner4: {
    right: 10,
    bottom: 10
  }
});

var UpdatingSample1 = _wrapComponent('UpdatingSample1')(function (_React$Component3) {
  _inherits(UpdatingSample1, _React$Component3);

  function UpdatingSample1() {
    _classCallCheck(this, UpdatingSample1);

    return _possibleConstructorReturn(this, (UpdatingSample1.__proto__ || Object.getPrototypeOf(UpdatingSample1)).apply(this, arguments));
  }

  _createClass(UpdatingSample1, [{
    key: 'render',
    value: function render() {
      var styles = updating1Styles;
      var inner1Styles = [styles.inner1, { height: this.props.update1 ? 200 : 100 }];
      var inner2Styles = [styles.inner2, { top: this.props.update2 ? 200 : 50 }];
      return React.createElement(
        View,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 141
          }
        },
        React.createElement(
          ClippableView,
          { clippableViewID: 'outer', style: styles.outer, removeClippedSubviews: true, __source: {
              fileName: _jsxFileName,
              lineNumber: 142
            }
          },
          React.createElement(ClippableView, { clippableViewID: 'inner1', style: inner1Styles, __source: {
              fileName: _jsxFileName,
              lineNumber: 143
            }
          }),
          React.createElement(ClippableView, { clippableViewID: 'inner2', style: inner2Styles, __source: {
              fileName: _jsxFileName,
              lineNumber: 144
            }
          })
        )
      );
    }
  }]);

  return UpdatingSample1;
}(React.Component));

var updating1Styles = StyleSheet.create({
  outer: {
    width: 200,
    height: 200,
    backgroundColor: 'red'
  },
  inner1: {
    position: 'absolute',
    width: 100,
    height: 100,
    left: 50,
    top: -100,
    backgroundColor: 'green'
  },
  inner2: {
    position: 'absolute',
    width: 100,
    height: 100,
    left: 50,
    top: 50,
    backgroundColor: 'green'
  }
});

var UpdatingSample2 = _wrapComponent('UpdatingSample2')(function (_React$Component4) {
  _inherits(UpdatingSample2, _React$Component4);

  function UpdatingSample2() {
    _classCallCheck(this, UpdatingSample2);

    return _possibleConstructorReturn(this, (UpdatingSample2.__proto__ || Object.getPrototypeOf(UpdatingSample2)).apply(this, arguments));
  }

  _createClass(UpdatingSample2, [{
    key: 'render',
    value: function render() {
      var styles = updating2Styles;
      var outerStyles = [styles.outer, { height: this.props.update ? 200 : 100 }];
      return React.createElement(
        View,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 180
          }
        },
        React.createElement(
          ClippableView,
          { clippableViewID: 'outer', style: outerStyles, removeClippedSubviews: true, __source: {
              fileName: _jsxFileName,
              lineNumber: 181
            }
          },
          React.createElement(ClippableView, { clippableViewID: 'inner', style: styles.inner, __source: {
              fileName: _jsxFileName,
              lineNumber: 182
            }
          })
        )
      );
    }
  }]);

  return UpdatingSample2;
}(React.Component));

var updating2Styles = StyleSheet.create({
  outer: {
    width: 100,
    height: 100,
    backgroundColor: 'red'
  },
  inner: {
    position: 'absolute',
    width: 100,
    height: 100,
    top: 100,
    backgroundColor: 'green'
  }
});

var ScrollViewTest = _wrapComponent('ScrollViewTest')(function (_React$Component5) {
  _inherits(ScrollViewTest, _React$Component5);

  function ScrollViewTest() {
    _classCallCheck(this, ScrollViewTest);

    return _possibleConstructorReturn(this, (ScrollViewTest.__proto__ || Object.getPrototypeOf(ScrollViewTest)).apply(this, arguments));
  }

  _createClass(ScrollViewTest, [{
    key: 'render',
    value: function render() {
      var styles = scrollTestStyles;
      var children = [];
      for (var i = 0; i < 4; i++) {
        children[i] = React.createElement(ClippableView, { key: i, style: styles.row, clippableViewID: '' + i, __source: {
            fileName: _jsxFileName,
            lineNumber: 210
          }
        });
      }
      for (var i = 4; i < 6; i++) {
        var viewID = 'C' + (i - 4);
        children[i] = React.createElement(
          ClippableView,
          {
            key: i,
            style: styles.complex,
            clippableViewID: viewID,
            removeClippedSubviews: true, __source: {
              fileName: _jsxFileName,
              lineNumber: 216
            }
          },
          React.createElement(ClippableView, { style: styles.inner, clippableViewID: viewID + '.1', __source: {
              fileName: _jsxFileName,
              lineNumber: 221
            }
          }),
          React.createElement(ClippableView, { style: styles.inner, clippableViewID: viewID + '.2', __source: {
              fileName: _jsxFileName,
              lineNumber: 222
            }
          })
        );
      }

      return React.createElement(
        ScrollView,
        { removeClippedSubviews: true, style: styles.scrollView, testID: 'scroll_view', __source: {
            fileName: _jsxFileName,
            lineNumber: 228
          }
        },
        children
      );
    }
  }]);

  return ScrollViewTest;
}(React.Component));

var scrollTestStyles = StyleSheet.create({
  scrollView: {
    width: 200,
    height: 300
  },
  row: {
    flex: 1,
    height: 120,
    backgroundColor: 'red',
    borderColor: 'blue',
    borderBottomWidth: 1
  },
  complex: {
    flex: 1,
    height: 240,
    backgroundColor: 'yellow',
    borderColor: 'blue',
    borderBottomWidth: 1
  },
  inner: {
    flex: 1,
    margin: 10,
    height: 100,
    backgroundColor: 'gray',
    borderColor: 'green',
    borderWidth: 1
  }
});

var appInstance = null;

var SubviewsClippingTestApp = _wrapComponent('SubviewsClippingTestApp')(function (_React$Component6) {
  _inherits(SubviewsClippingTestApp, _React$Component6);

  function SubviewsClippingTestApp() {
    var _ref;

    var _temp, _this6, _ret;

    _classCallCheck(this, SubviewsClippingTestApp);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this6 = _possibleConstructorReturn(this, (_ref = SubviewsClippingTestApp.__proto__ || Object.getPrototypeOf(SubviewsClippingTestApp)).call.apply(_ref, [this].concat(args))), _this6), _this6.state = {}, _this6.setComponent = function (component) {
      _this6.setState({ component: component });
    }, _temp), _possibleConstructorReturn(_this6, _ret);
  }

  _createClass(SubviewsClippingTestApp, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      appInstance = this;
    }
  }, {
    key: 'render',
    value: function render() {
      var component = this.state.component;
      return React.createElement(
        View,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 281
          }
        },
        component
      );
    }
  }]);

  return SubviewsClippingTestApp;
}(React.Component));

var SubviewsClippingTestModule = {
  App: SubviewsClippingTestApp,
  renderClippingSample1: function renderClippingSample1() {
    appInstance.setComponent(React.createElement(ClippingSample1, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 291
      }
    }));
  },
  renderClippingSample2: function renderClippingSample2() {
    appInstance.setComponent(React.createElement(ClippingSample2, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 294
      }
    }));
  },
  renderUpdatingSample1: function renderUpdatingSample1(update1, update2) {
    appInstance.setComponent(React.createElement(UpdatingSample1, { update1: update1, update2: update2, __source: {
        fileName: _jsxFileName,
        lineNumber: 297
      }
    }));
  },
  renderUpdatingSample2: function renderUpdatingSample2(update) {
    appInstance.setComponent(React.createElement(UpdatingSample2, { update: update, __source: {
        fileName: _jsxFileName,
        lineNumber: 300
      }
    }));
  },
  renderScrollViewTest: function renderScrollViewTest() {
    appInstance.setComponent(React.createElement(ScrollViewTest, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 303
      }
    }));
  }
};

BatchedBridge.registerCallableModule('SubviewsClippingTestModule', SubviewsClippingTestModule);

module.exports = SubviewsClippingTestModule;